{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "UnfSEzvvLydw"
   },
   "source": [
    "# Task 1\n",
    "Gabriel Idris Gilling (gig2106@columbia.edu) & Juan Lopez-Martin (jl5522@columbia.edu) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 291
    },
    "colab_type": "code",
    "id": "AIiWhOyg3sq3",
    "outputId": "9a94542d-28df-4473-a722-1cdac8586142"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import load_digits\n",
    "digits = load_digits()\n",
    "\n",
    "import matplotlib.pyplot as plt \n",
    "plt.gray() \n",
    "plt.matshow(digits.images[0]) \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "HapfaTNSMAmy",
    "outputId": "e9e51cd9-7365-4a46-e90c-623da8e51b4a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1797, 64)"
      ]
     },
     "execution_count": 2,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "digits.data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "PNAFlrYgLd9r"
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, BatchNormalization, Dropout\n",
    "\n",
    "from keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor\n",
    "from keras import regularizers\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "PhY_0MhjPb1m",
    "outputId": "c27401a9-fe9c-4250-9660-f650643ca381"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1797, 64)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = digits.data\n",
    "y = digits.target\n",
    "\n",
    "print(X.shape)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, \n",
    "                                                    y, \n",
    "                                                    random_state=2020)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "gFOS9Cb-QVnF",
    "outputId": "af572ff8-7ef5-4feb-95b3-7974fe83277e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1347, 64)"
      ]
     },
     "execution_count": 165,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "k9JT62e40Fb5",
    "outputId": "3b5255e8-c9bb-448d-b5bc-2ba1a3baba5c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1347,)"
      ]
     },
     "execution_count": 166,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Rlj0R_iQLeAe"
   },
   "outputs": [],
   "source": [
    "def make_model(optimizer=\"adam\", hidden_size= 32, l2_reg = 0):\n",
    "    model = Sequential([\n",
    "        Dense(hidden_size, input_shape=(64,), activity_regularizer=regularizers.l2(l2_reg)),\n",
    "        Activation('relu'),\n",
    "        Dense(hidden_size, input_shape=(64,), activity_regularizer=regularizers.l2(l2_reg)),\n",
    "        Activation('relu'),\n",
    "        Dense(10),\n",
    "        Activation('softmax'),\n",
    "    ])\n",
    "    model.compile(optimizer=optimizer,loss=\"categorical_crossentropy\",\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1xkuoiIRLeC9"
   },
   "outputs": [],
   "source": [
    "clf = KerasClassifier(make_model)\n",
    "\n",
    "param_grid = {'epochs': [1, 5, 10],  # epochs is fit parameter, not in make_model!\n",
    "              'hidden_size': [32, 64, 256],\n",
    "              'l2_reg': [0, 0.5, 0.4, 0.3, 0.2, 0.1, 0.01, 0.001]}\n",
    "\n",
    "grid = GridSearchCV(clf, param_grid=param_grid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2YJzR4n-hmRG"
   },
   "outputs": [],
   "source": [
    "grid.best_params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "H_lF6vyuLeFk"
   },
   "outputs": [],
   "source": [
    "grid.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "Y-kPzmgZQlqP",
    "outputId": "b73e631d-eada-4a3a-ff13-ec082911d3e3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "450/450 [==============================] - 0s 109us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9911110997200012"
      ]
     },
     "execution_count": 38,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cKHNn4X2mxa3"
   },
   "source": [
    "# Task 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 163
    },
    "colab_type": "code",
    "id": "pp9cdqmxm0mM",
    "outputId": "e2220eaf-2cb7-4a5b-fdce-a1da07bba1ec"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n",
      "32768/29515 [=================================] - 0s 9us/step\n",
      "Downloading data from http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n",
      "26427392/26421880 [==============================] - 4s 0us/step\n",
      "Downloading data from http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n",
      "8192/5148 [===============================================] - 0s 0us/step\n",
      "Downloading data from http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n",
      "4423680/4422102 [==============================] - 2s 1us/step\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import fashion_mnist\n",
    "from keras.utils import to_categorical\n",
    "(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "9hFEe-H1ss7O",
    "outputId": "ca54b9e5-812d-4b28-b7d3-9449af32a572"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000 train samples\n",
      "10000 test samples\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train.reshape(60000, 784)\n",
    "X_test = X_test.reshape(10000, 784)\n",
    "\n",
    "X_train = X_train.astype('float32')\n",
    "X_test = X_test.astype('float32')\n",
    "\n",
    "X_train /= 255 # scaling\n",
    "X_test /= 255\n",
    "print(X_train.shape[0], 'train samples')\n",
    "print(X_test.shape[0], 'test samples')\n",
    "num_classes = 10\n",
    "# convert class vectors to binary class matrices\n",
    "y_train = to_categorical(y_train, num_classes)\n",
    "y_test = to_categorical(y_test, num_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ZUaRGy_KtQlF"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_train, \n",
    "                                                    y_train, \n",
    "                                                    random_state=2020,\n",
    "                                                  test_size = 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "Zct5UppInR5U",
    "outputId": "a8b6af2d-007a-4bba-864c-b9c483263279"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 784)"
      ]
     },
     "execution_count": 5,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_val.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "s1OSIPCto25v"
   },
   "source": [
    "## \"Vanilla\" Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "eIDWl6vEr7DP"
   },
   "outputs": [],
   "source": [
    "def make_model_vanilla(optimizer=\"adam\", hidden_size= 32):\n",
    "    model = Sequential([\n",
    "        Dense(hidden_size, input_shape=(784,)),\n",
    "        Activation('relu'),\n",
    "        Dense(hidden_size, input_shape=(784,)),\n",
    "        Activation('relu'),\n",
    "        Dense(hidden_size, input_shape=(784,)),\n",
    "        Activation('relu'),\n",
    "        Dense(10),\n",
    "        Activation('softmax'),\n",
    "    ])\n",
    "    model.compile(optimizer=optimizer,loss=\"categorical_crossentropy\",\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "91lHHWOSsE8n"
   },
   "outputs": [],
   "source": [
    "#clf_vanilla = KerasClassifier(make_model_vanilla)\n",
    "model_vanilla = make_model_vanilla()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "Yrm75DCzsLhE",
    "outputId": "f0069eb1-8ae8-460f-dc3c-2cb38feb61d6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 50000 samples, validate on 10000 samples\n",
      "Epoch 1/100\n",
      "50000/50000 [==============================] - 7s 133us/step - loss: 0.5893 - accuracy: 0.7932 - val_loss: 0.4332 - val_accuracy: 0.8470\n",
      "Epoch 2/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.4241 - accuracy: 0.8488 - val_loss: 0.4116 - val_accuracy: 0.8571\n",
      "Epoch 3/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.3849 - accuracy: 0.8619 - val_loss: 0.3843 - val_accuracy: 0.8627\n",
      "Epoch 4/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.3609 - accuracy: 0.8701 - val_loss: 0.3884 - val_accuracy: 0.8621\n",
      "Epoch 5/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.3448 - accuracy: 0.8750 - val_loss: 0.3961 - val_accuracy: 0.8566\n",
      "Epoch 6/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.3313 - accuracy: 0.8789 - val_loss: 0.3525 - val_accuracy: 0.8751\n",
      "Epoch 7/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.3230 - accuracy: 0.8822 - val_loss: 0.3463 - val_accuracy: 0.8784\n",
      "Epoch 8/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.3131 - accuracy: 0.8853 - val_loss: 0.3588 - val_accuracy: 0.8720\n",
      "Epoch 9/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.3017 - accuracy: 0.8885 - val_loss: 0.3467 - val_accuracy: 0.8761\n",
      "Epoch 10/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2946 - accuracy: 0.8913 - val_loss: 0.3490 - val_accuracy: 0.8723\n",
      "Epoch 11/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2885 - accuracy: 0.8931 - val_loss: 0.3551 - val_accuracy: 0.8764\n",
      "Epoch 12/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2823 - accuracy: 0.8946 - val_loss: 0.3494 - val_accuracy: 0.8775\n",
      "Epoch 13/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.2766 - accuracy: 0.8966 - val_loss: 0.3602 - val_accuracy: 0.8740\n",
      "Epoch 14/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2700 - accuracy: 0.8988 - val_loss: 0.3551 - val_accuracy: 0.8754\n",
      "Epoch 15/100\n",
      "50000/50000 [==============================] - 5s 103us/step - loss: 0.2659 - accuracy: 0.9009 - val_loss: 0.3589 - val_accuracy: 0.8782\n",
      "Epoch 16/100\n",
      "50000/50000 [==============================] - 5s 103us/step - loss: 0.2621 - accuracy: 0.9027 - val_loss: 0.3506 - val_accuracy: 0.8781\n",
      "Epoch 17/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2558 - accuracy: 0.9038 - val_loss: 0.3671 - val_accuracy: 0.8743\n",
      "Epoch 18/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2551 - accuracy: 0.9049 - val_loss: 0.3655 - val_accuracy: 0.8773\n",
      "Epoch 19/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2517 - accuracy: 0.9055 - val_loss: 0.3552 - val_accuracy: 0.8772\n",
      "Epoch 20/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2476 - accuracy: 0.9062 - val_loss: 0.3474 - val_accuracy: 0.8821\n",
      "Epoch 21/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.2430 - accuracy: 0.9091 - val_loss: 0.3744 - val_accuracy: 0.8785\n",
      "Epoch 22/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2419 - accuracy: 0.9091 - val_loss: 0.3544 - val_accuracy: 0.8819\n",
      "Epoch 23/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2382 - accuracy: 0.9105 - val_loss: 0.3676 - val_accuracy: 0.8770\n",
      "Epoch 24/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2364 - accuracy: 0.9107 - val_loss: 0.3685 - val_accuracy: 0.8775\n",
      "Epoch 25/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2345 - accuracy: 0.9124 - val_loss: 0.3537 - val_accuracy: 0.8811\n",
      "Epoch 26/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2307 - accuracy: 0.9135 - val_loss: 0.4180 - val_accuracy: 0.8660\n",
      "Epoch 27/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2286 - accuracy: 0.9140 - val_loss: 0.3628 - val_accuracy: 0.8830\n",
      "Epoch 28/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2270 - accuracy: 0.9146 - val_loss: 0.3668 - val_accuracy: 0.8838\n",
      "Epoch 29/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2234 - accuracy: 0.9160 - val_loss: 0.3634 - val_accuracy: 0.8832\n",
      "Epoch 30/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.2202 - accuracy: 0.9173 - val_loss: 0.3991 - val_accuracy: 0.8777\n",
      "Epoch 31/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.2199 - accuracy: 0.9173 - val_loss: 0.3822 - val_accuracy: 0.8789\n",
      "Epoch 32/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.2182 - accuracy: 0.9181 - val_loss: 0.3806 - val_accuracy: 0.8788\n",
      "Epoch 33/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.2154 - accuracy: 0.9189 - val_loss: 0.3706 - val_accuracy: 0.8808\n",
      "Epoch 34/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2137 - accuracy: 0.9199 - val_loss: 0.3820 - val_accuracy: 0.8790\n",
      "Epoch 35/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.2117 - accuracy: 0.9202 - val_loss: 0.3884 - val_accuracy: 0.8796\n",
      "Epoch 36/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2104 - accuracy: 0.9210 - val_loss: 0.3897 - val_accuracy: 0.8792\n",
      "Epoch 37/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2069 - accuracy: 0.9215 - val_loss: 0.3734 - val_accuracy: 0.8826\n",
      "Epoch 38/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.2048 - accuracy: 0.9230 - val_loss: 0.4063 - val_accuracy: 0.8749\n",
      "Epoch 39/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.2045 - accuracy: 0.9236 - val_loss: 0.4311 - val_accuracy: 0.8721\n",
      "Epoch 40/100\n",
      "50000/50000 [==============================] - 5s 105us/step - loss: 0.2018 - accuracy: 0.9242 - val_loss: 0.4161 - val_accuracy: 0.8759\n",
      "Epoch 41/100\n",
      "50000/50000 [==============================] - 5s 106us/step - loss: 0.2029 - accuracy: 0.9233 - val_loss: 0.3982 - val_accuracy: 0.8799\n",
      "Epoch 42/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1994 - accuracy: 0.9256 - val_loss: 0.4124 - val_accuracy: 0.8799\n",
      "Epoch 43/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1982 - accuracy: 0.9249 - val_loss: 0.4115 - val_accuracy: 0.8773\n",
      "Epoch 44/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1934 - accuracy: 0.9257 - val_loss: 0.4188 - val_accuracy: 0.8802\n",
      "Epoch 45/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1923 - accuracy: 0.9277 - val_loss: 0.4065 - val_accuracy: 0.8814\n",
      "Epoch 46/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1930 - accuracy: 0.9269 - val_loss: 0.4025 - val_accuracy: 0.8761\n",
      "Epoch 47/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1922 - accuracy: 0.9266 - val_loss: 0.4331 - val_accuracy: 0.8793\n",
      "Epoch 48/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.1881 - accuracy: 0.9283 - val_loss: 0.4231 - val_accuracy: 0.8780\n",
      "Epoch 49/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1911 - accuracy: 0.9277 - val_loss: 0.4305 - val_accuracy: 0.8730\n",
      "Epoch 50/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1861 - accuracy: 0.9297 - val_loss: 0.4211 - val_accuracy: 0.8807\n",
      "Epoch 51/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1864 - accuracy: 0.9296 - val_loss: 0.4290 - val_accuracy: 0.8817\n",
      "Epoch 52/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1840 - accuracy: 0.9301 - val_loss: 0.4343 - val_accuracy: 0.8727\n",
      "Epoch 53/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1838 - accuracy: 0.9299 - val_loss: 0.4333 - val_accuracy: 0.8795\n",
      "Epoch 54/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1798 - accuracy: 0.9314 - val_loss: 0.4438 - val_accuracy: 0.8795\n",
      "Epoch 55/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1823 - accuracy: 0.9311 - val_loss: 0.4909 - val_accuracy: 0.8728\n",
      "Epoch 56/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1803 - accuracy: 0.9327 - val_loss: 0.4375 - val_accuracy: 0.8760\n",
      "Epoch 57/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1803 - accuracy: 0.9316 - val_loss: 0.4648 - val_accuracy: 0.8815\n",
      "Epoch 58/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1753 - accuracy: 0.9343 - val_loss: 0.4699 - val_accuracy: 0.8768\n",
      "Epoch 59/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1777 - accuracy: 0.9317 - val_loss: 0.4503 - val_accuracy: 0.8801\n",
      "Epoch 60/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1721 - accuracy: 0.9352 - val_loss: 0.4602 - val_accuracy: 0.8799\n",
      "Epoch 61/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1744 - accuracy: 0.9338 - val_loss: 0.4654 - val_accuracy: 0.8798\n",
      "Epoch 62/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1714 - accuracy: 0.9350 - val_loss: 0.5043 - val_accuracy: 0.8760\n",
      "Epoch 63/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1713 - accuracy: 0.9355 - val_loss: 0.4798 - val_accuracy: 0.8790\n",
      "Epoch 64/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.1717 - accuracy: 0.9345 - val_loss: 0.4534 - val_accuracy: 0.8807\n",
      "Epoch 65/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1673 - accuracy: 0.9358 - val_loss: 0.5144 - val_accuracy: 0.8790\n",
      "Epoch 66/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1691 - accuracy: 0.9364 - val_loss: 0.4853 - val_accuracy: 0.8801\n",
      "Epoch 67/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1663 - accuracy: 0.9377 - val_loss: 0.5393 - val_accuracy: 0.8727\n",
      "Epoch 68/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1661 - accuracy: 0.9370 - val_loss: 0.5101 - val_accuracy: 0.8746\n",
      "Epoch 69/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1676 - accuracy: 0.9365 - val_loss: 0.4876 - val_accuracy: 0.8808\n",
      "Epoch 70/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1622 - accuracy: 0.9394 - val_loss: 0.5098 - val_accuracy: 0.8792\n",
      "Epoch 71/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1612 - accuracy: 0.9385 - val_loss: 0.5210 - val_accuracy: 0.8672\n",
      "Epoch 72/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1611 - accuracy: 0.9381 - val_loss: 0.4921 - val_accuracy: 0.8821\n",
      "Epoch 73/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1607 - accuracy: 0.9394 - val_loss: 0.5114 - val_accuracy: 0.8729\n",
      "Epoch 74/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1617 - accuracy: 0.9387 - val_loss: 0.5324 - val_accuracy: 0.8773\n",
      "Epoch 75/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1593 - accuracy: 0.9381 - val_loss: 0.5165 - val_accuracy: 0.8791\n",
      "Epoch 76/100\n",
      "50000/50000 [==============================] - 5s 104us/step - loss: 0.1597 - accuracy: 0.9393 - val_loss: 0.5138 - val_accuracy: 0.8738\n",
      "Epoch 77/100\n",
      "50000/50000 [==============================] - 5s 103us/step - loss: 0.1589 - accuracy: 0.9393 - val_loss: 0.5375 - val_accuracy: 0.8770\n",
      "Epoch 78/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.1567 - accuracy: 0.9406 - val_loss: 0.5576 - val_accuracy: 0.8703\n",
      "Epoch 79/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.1573 - accuracy: 0.9402 - val_loss: 0.5011 - val_accuracy: 0.8756\n",
      "Epoch 80/100\n",
      "50000/50000 [==============================] - 5s 103us/step - loss: 0.1568 - accuracy: 0.9403 - val_loss: 0.5262 - val_accuracy: 0.8738\n",
      "Epoch 81/100\n",
      "50000/50000 [==============================] - 5s 101us/step - loss: 0.1532 - accuracy: 0.9413 - val_loss: 0.5173 - val_accuracy: 0.8739\n",
      "Epoch 82/100\n",
      "50000/50000 [==============================] - 5s 98us/step - loss: 0.1518 - accuracy: 0.9428 - val_loss: 0.5268 - val_accuracy: 0.8812\n",
      "Epoch 83/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1545 - accuracy: 0.9411 - val_loss: 0.5653 - val_accuracy: 0.8689\n",
      "Epoch 84/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1515 - accuracy: 0.9419 - val_loss: 0.5521 - val_accuracy: 0.8692\n",
      "Epoch 85/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1508 - accuracy: 0.9434 - val_loss: 0.5649 - val_accuracy: 0.8750\n",
      "Epoch 86/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1522 - accuracy: 0.9430 - val_loss: 0.5374 - val_accuracy: 0.8753\n",
      "Epoch 87/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1519 - accuracy: 0.9427 - val_loss: 0.6021 - val_accuracy: 0.8715\n",
      "Epoch 88/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1471 - accuracy: 0.9441 - val_loss: 0.5925 - val_accuracy: 0.8723\n",
      "Epoch 89/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1495 - accuracy: 0.9427 - val_loss: 0.5800 - val_accuracy: 0.8762\n",
      "Epoch 90/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1511 - accuracy: 0.9428 - val_loss: 0.5606 - val_accuracy: 0.8758\n",
      "Epoch 91/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1471 - accuracy: 0.9433 - val_loss: 0.5486 - val_accuracy: 0.8774\n",
      "Epoch 92/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1490 - accuracy: 0.9443 - val_loss: 0.5774 - val_accuracy: 0.8718\n",
      "Epoch 93/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1415 - accuracy: 0.9460 - val_loss: 0.5561 - val_accuracy: 0.8719\n",
      "Epoch 94/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1463 - accuracy: 0.9436 - val_loss: 0.5500 - val_accuracy: 0.8759\n",
      "Epoch 95/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1449 - accuracy: 0.9452 - val_loss: 0.5957 - val_accuracy: 0.8691\n",
      "Epoch 96/100\n",
      "50000/50000 [==============================] - 5s 100us/step - loss: 0.1442 - accuracy: 0.9456 - val_loss: 0.5689 - val_accuracy: 0.8748\n",
      "Epoch 97/100\n",
      "50000/50000 [==============================] - 5s 102us/step - loss: 0.1432 - accuracy: 0.9464 - val_loss: 0.5688 - val_accuracy: 0.8696\n",
      "Epoch 98/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1427 - accuracy: 0.9461 - val_loss: 0.5655 - val_accuracy: 0.8759\n",
      "Epoch 99/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1395 - accuracy: 0.9473 - val_loss: 0.5857 - val_accuracy: 0.8759\n",
      "Epoch 100/100\n",
      "50000/50000 [==============================] - 5s 99us/step - loss: 0.1441 - accuracy: 0.9443 - val_loss: 0.6080 - val_accuracy: 0.8728\n"
     ]
    }
   ],
   "source": [
    "history_callback_vanilla = model_vanilla.fit(X_train, y_train, epochs = 100, validation_data= (X_val,y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "colab_type": "code",
    "id": "Q9LLCNs0AhWe",
    "outputId": "f3c7a4e2-90ac-4431-ebe7-078d42a0fe00"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.plot(history_callback_vanilla.history['accuracy'])\n",
    "plt.plot(history_callback_vanilla.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 407
    },
    "colab_type": "code",
    "id": "r2Ngfdlk6z_e",
    "outputId": "b8d88ae2-6e50-4c90-964c-851ad0e06887"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 32)                25120     \n",
      "_________________________________________________________________\n",
      "activation_1 (Activation)    (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 32)                1056      \n",
      "_________________________________________________________________\n",
      "activation_2 (Activation)    (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 32)                1056      \n",
      "_________________________________________________________________\n",
      "activation_3 (Activation)    (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 10)                330       \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 27,562\n",
      "Trainable params: 27,562\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_vanilla.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qtfhFewshWBZ"
   },
   "source": [
    "## Dropout Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sUDwzNDD-dL4"
   },
   "outputs": [],
   "source": [
    "def make_model_dropout(optimizer=\"adam\", hidden_size= 32, dropout_rate = 0.1):\n",
    "    model = Sequential([\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    Dropout(dropout_rate, input_shape=(784,)),\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    Dropout(dropout_rate, input_shape=(784,)),\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    Dropout(dropout_rate, input_shape=(784,)),\n",
    "    Dense(10, activation='softmax')])\n",
    "\n",
    "    model.compile(optimizer=optimizer,loss=\"categorical_crossentropy\",\n",
    "                  metrics=['accuracy'])\n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "a8dHFpQrmyyO"
   },
   "outputs": [],
   "source": [
    "model_dropout = make_model_dropout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "lrGP8E79m4Aq",
    "outputId": "5bbcd52d-e088-41e3-a703-af37e383c62f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 50000 samples, validate on 10000 samples\n",
      "Epoch 1/100\n",
      "50000/50000 [==============================] - 6s 117us/step - loss: 0.7144 - accuracy: 0.7405 - val_loss: 0.4442 - val_accuracy: 0.8404\n",
      "Epoch 2/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.4952 - accuracy: 0.8215 - val_loss: 0.4148 - val_accuracy: 0.8499\n",
      "Epoch 3/100\n",
      "50000/50000 [==============================] - 6s 114us/step - loss: 0.4534 - accuracy: 0.8386 - val_loss: 0.4240 - val_accuracy: 0.8421\n",
      "Epoch 4/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.4315 - accuracy: 0.8433 - val_loss: 0.3963 - val_accuracy: 0.8574\n",
      "Epoch 5/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.4120 - accuracy: 0.8501 - val_loss: 0.3809 - val_accuracy: 0.8612\n",
      "Epoch 6/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.4043 - accuracy: 0.8525 - val_loss: 0.3715 - val_accuracy: 0.8620\n",
      "Epoch 7/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3937 - accuracy: 0.8568 - val_loss: 0.3648 - val_accuracy: 0.8663\n",
      "Epoch 8/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3831 - accuracy: 0.8605 - val_loss: 0.3635 - val_accuracy: 0.8707\n",
      "Epoch 9/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3769 - accuracy: 0.8625 - val_loss: 0.3699 - val_accuracy: 0.8680\n",
      "Epoch 10/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3734 - accuracy: 0.8631 - val_loss: 0.3640 - val_accuracy: 0.8670\n",
      "Epoch 11/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3676 - accuracy: 0.8667 - val_loss: 0.3674 - val_accuracy: 0.8650\n",
      "Epoch 12/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3616 - accuracy: 0.8684 - val_loss: 0.3634 - val_accuracy: 0.8705\n",
      "Epoch 13/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3547 - accuracy: 0.8693 - val_loss: 0.3626 - val_accuracy: 0.8697\n",
      "Epoch 14/100\n",
      "50000/50000 [==============================] - 6s 113us/step - loss: 0.3536 - accuracy: 0.8707 - val_loss: 0.3482 - val_accuracy: 0.8753\n",
      "Epoch 15/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3495 - accuracy: 0.8725 - val_loss: 0.3699 - val_accuracy: 0.8689\n",
      "Epoch 16/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3472 - accuracy: 0.8731 - val_loss: 0.3560 - val_accuracy: 0.8692\n",
      "Epoch 17/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3426 - accuracy: 0.8739 - val_loss: 0.3578 - val_accuracy: 0.8737\n",
      "Epoch 18/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.3401 - accuracy: 0.8739 - val_loss: 0.3484 - val_accuracy: 0.8734\n",
      "Epoch 19/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3367 - accuracy: 0.8754 - val_loss: 0.3526 - val_accuracy: 0.8752\n",
      "Epoch 20/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3340 - accuracy: 0.8762 - val_loss: 0.3566 - val_accuracy: 0.8737\n",
      "Epoch 21/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3322 - accuracy: 0.8775 - val_loss: 0.3638 - val_accuracy: 0.8730\n",
      "Epoch 22/100\n",
      "50000/50000 [==============================] - 6s 114us/step - loss: 0.3330 - accuracy: 0.8785 - val_loss: 0.3449 - val_accuracy: 0.8754\n",
      "Epoch 23/100\n",
      "50000/50000 [==============================] - 6s 114us/step - loss: 0.3282 - accuracy: 0.8802 - val_loss: 0.3511 - val_accuracy: 0.8725\n",
      "Epoch 24/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3266 - accuracy: 0.8797 - val_loss: 0.3743 - val_accuracy: 0.8691\n",
      "Epoch 25/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3250 - accuracy: 0.8806 - val_loss: 0.3596 - val_accuracy: 0.8717\n",
      "Epoch 26/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3222 - accuracy: 0.8809 - val_loss: 0.3647 - val_accuracy: 0.8699\n",
      "Epoch 27/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3223 - accuracy: 0.8827 - val_loss: 0.3620 - val_accuracy: 0.8745\n",
      "Epoch 28/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3195 - accuracy: 0.8823 - val_loss: 0.3569 - val_accuracy: 0.8755\n",
      "Epoch 29/100\n",
      "50000/50000 [==============================] - 6s 113us/step - loss: 0.3164 - accuracy: 0.8821 - val_loss: 0.3497 - val_accuracy: 0.8758\n",
      "Epoch 30/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3158 - accuracy: 0.8845 - val_loss: 0.3622 - val_accuracy: 0.8743\n",
      "Epoch 31/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3148 - accuracy: 0.8850 - val_loss: 0.3572 - val_accuracy: 0.8756\n",
      "Epoch 32/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3146 - accuracy: 0.8851 - val_loss: 0.3537 - val_accuracy: 0.8741\n",
      "Epoch 33/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.3066 - accuracy: 0.8865 - val_loss: 0.3469 - val_accuracy: 0.8780\n",
      "Epoch 34/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3110 - accuracy: 0.8858 - val_loss: 0.3524 - val_accuracy: 0.8745\n",
      "Epoch 35/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3069 - accuracy: 0.8866 - val_loss: 0.3561 - val_accuracy: 0.8721\n",
      "Epoch 36/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3074 - accuracy: 0.8867 - val_loss: 0.3501 - val_accuracy: 0.8749\n",
      "Epoch 37/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.3086 - accuracy: 0.8863 - val_loss: 0.3447 - val_accuracy: 0.8771\n",
      "Epoch 38/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3027 - accuracy: 0.8882 - val_loss: 0.3668 - val_accuracy: 0.8754\n",
      "Epoch 39/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3017 - accuracy: 0.8887 - val_loss: 0.3575 - val_accuracy: 0.8762\n",
      "Epoch 40/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.3015 - accuracy: 0.8898 - val_loss: 0.3610 - val_accuracy: 0.8731\n",
      "Epoch 41/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.3064 - accuracy: 0.8868 - val_loss: 0.3575 - val_accuracy: 0.8778\n",
      "Epoch 42/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3000 - accuracy: 0.8890 - val_loss: 0.3504 - val_accuracy: 0.8769\n",
      "Epoch 43/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.3021 - accuracy: 0.8889 - val_loss: 0.3553 - val_accuracy: 0.8765\n",
      "Epoch 44/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2992 - accuracy: 0.8908 - val_loss: 0.3530 - val_accuracy: 0.8808\n",
      "Epoch 45/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2969 - accuracy: 0.8908 - val_loss: 0.3595 - val_accuracy: 0.8765\n",
      "Epoch 46/100\n",
      "50000/50000 [==============================] - 6s 113us/step - loss: 0.2992 - accuracy: 0.8894 - val_loss: 0.3536 - val_accuracy: 0.8740\n",
      "Epoch 47/100\n",
      "50000/50000 [==============================] - 6s 116us/step - loss: 0.2957 - accuracy: 0.8911 - val_loss: 0.3518 - val_accuracy: 0.8782\n",
      "Epoch 48/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2976 - accuracy: 0.8915 - val_loss: 0.3556 - val_accuracy: 0.8738\n",
      "Epoch 49/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2946 - accuracy: 0.8917 - val_loss: 0.3640 - val_accuracy: 0.8743\n",
      "Epoch 50/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2950 - accuracy: 0.8912 - val_loss: 0.3700 - val_accuracy: 0.8724\n",
      "Epoch 51/100\n",
      "50000/50000 [==============================] - 6s 113us/step - loss: 0.2935 - accuracy: 0.8915 - val_loss: 0.3630 - val_accuracy: 0.8733\n",
      "Epoch 52/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2908 - accuracy: 0.8919 - val_loss: 0.3648 - val_accuracy: 0.8743\n",
      "Epoch 53/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2893 - accuracy: 0.8926 - val_loss: 0.3777 - val_accuracy: 0.8723\n",
      "Epoch 54/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2896 - accuracy: 0.8921 - val_loss: 0.3577 - val_accuracy: 0.8784\n",
      "Epoch 55/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2889 - accuracy: 0.8924 - val_loss: 0.3586 - val_accuracy: 0.8758\n",
      "Epoch 56/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2855 - accuracy: 0.8958 - val_loss: 0.3633 - val_accuracy: 0.8756\n",
      "Epoch 57/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2883 - accuracy: 0.8933 - val_loss: 0.3590 - val_accuracy: 0.8781\n",
      "Epoch 58/100\n",
      "50000/50000 [==============================] - 6s 113us/step - loss: 0.2869 - accuracy: 0.8941 - val_loss: 0.3904 - val_accuracy: 0.8700\n",
      "Epoch 59/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2852 - accuracy: 0.8942 - val_loss: 0.3615 - val_accuracy: 0.8809\n",
      "Epoch 60/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2852 - accuracy: 0.8949 - val_loss: 0.3820 - val_accuracy: 0.8708\n",
      "Epoch 61/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2822 - accuracy: 0.8952 - val_loss: 0.3662 - val_accuracy: 0.8780\n",
      "Epoch 62/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2859 - accuracy: 0.8945 - val_loss: 0.3600 - val_accuracy: 0.8760\n",
      "Epoch 63/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2847 - accuracy: 0.8951 - val_loss: 0.3625 - val_accuracy: 0.8770\n",
      "Epoch 64/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2829 - accuracy: 0.8952 - val_loss: 0.3603 - val_accuracy: 0.8776\n",
      "Epoch 65/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2794 - accuracy: 0.8953 - val_loss: 0.3646 - val_accuracy: 0.8732\n",
      "Epoch 66/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2811 - accuracy: 0.8961 - val_loss: 0.3693 - val_accuracy: 0.8762\n",
      "Epoch 67/100\n",
      "50000/50000 [==============================] - 5s 109us/step - loss: 0.2795 - accuracy: 0.8960 - val_loss: 0.3589 - val_accuracy: 0.8771\n",
      "Epoch 68/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2785 - accuracy: 0.8989 - val_loss: 0.3651 - val_accuracy: 0.8749\n",
      "Epoch 69/100\n",
      "50000/50000 [==============================] - 5s 109us/step - loss: 0.2800 - accuracy: 0.8980 - val_loss: 0.3568 - val_accuracy: 0.8802\n",
      "Epoch 70/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2784 - accuracy: 0.8966 - val_loss: 0.3669 - val_accuracy: 0.8739\n",
      "Epoch 71/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2800 - accuracy: 0.8973 - val_loss: 0.3900 - val_accuracy: 0.8732\n",
      "Epoch 72/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2812 - accuracy: 0.8966 - val_loss: 0.3788 - val_accuracy: 0.8766\n",
      "Epoch 73/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2730 - accuracy: 0.8972 - val_loss: 0.3731 - val_accuracy: 0.8759\n",
      "Epoch 74/100\n",
      "50000/50000 [==============================] - 5s 109us/step - loss: 0.2755 - accuracy: 0.8978 - val_loss: 0.3757 - val_accuracy: 0.8734\n",
      "Epoch 75/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2767 - accuracy: 0.8987 - val_loss: 0.3829 - val_accuracy: 0.8791\n",
      "Epoch 76/100\n",
      "50000/50000 [==============================] - 5s 109us/step - loss: 0.2755 - accuracy: 0.8988 - val_loss: 0.3872 - val_accuracy: 0.8713\n",
      "Epoch 77/100\n",
      "50000/50000 [==============================] - 6s 116us/step - loss: 0.2763 - accuracy: 0.8981 - val_loss: 0.3727 - val_accuracy: 0.8717\n",
      "Epoch 78/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2737 - accuracy: 0.8991 - val_loss: 0.3767 - val_accuracy: 0.8749\n",
      "Epoch 79/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2736 - accuracy: 0.8984 - val_loss: 0.3805 - val_accuracy: 0.8771\n",
      "Epoch 80/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2767 - accuracy: 0.8975 - val_loss: 0.3689 - val_accuracy: 0.8763\n",
      "Epoch 81/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2757 - accuracy: 0.8981 - val_loss: 0.3726 - val_accuracy: 0.8762\n",
      "Epoch 82/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2752 - accuracy: 0.8990 - val_loss: 0.3722 - val_accuracy: 0.8767\n",
      "Epoch 83/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2699 - accuracy: 0.8993 - val_loss: 0.3732 - val_accuracy: 0.8769\n",
      "Epoch 84/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2732 - accuracy: 0.9013 - val_loss: 0.3695 - val_accuracy: 0.8757\n",
      "Epoch 85/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2744 - accuracy: 0.8980 - val_loss: 0.3741 - val_accuracy: 0.8786\n",
      "Epoch 86/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2708 - accuracy: 0.9009 - val_loss: 0.3742 - val_accuracy: 0.8766\n",
      "Epoch 87/100\n",
      "50000/50000 [==============================] - 6s 112us/step - loss: 0.2719 - accuracy: 0.8999 - val_loss: 0.3741 - val_accuracy: 0.8782\n",
      "Epoch 88/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2702 - accuracy: 0.9012 - val_loss: 0.3601 - val_accuracy: 0.8767\n",
      "Epoch 89/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2721 - accuracy: 0.8997 - val_loss: 0.3703 - val_accuracy: 0.8795\n",
      "Epoch 90/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2687 - accuracy: 0.9005 - val_loss: 0.3876 - val_accuracy: 0.8728\n",
      "Epoch 91/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2666 - accuracy: 0.9025 - val_loss: 0.3801 - val_accuracy: 0.8763\n",
      "Epoch 92/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2685 - accuracy: 0.9002 - val_loss: 0.3778 - val_accuracy: 0.8792\n",
      "Epoch 93/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2663 - accuracy: 0.9019 - val_loss: 0.3715 - val_accuracy: 0.8769\n",
      "Epoch 94/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2674 - accuracy: 0.9025 - val_loss: 0.3816 - val_accuracy: 0.8762\n",
      "Epoch 95/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2656 - accuracy: 0.9020 - val_loss: 0.3739 - val_accuracy: 0.8737\n",
      "Epoch 96/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2656 - accuracy: 0.9025 - val_loss: 0.3789 - val_accuracy: 0.8757\n",
      "Epoch 97/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2687 - accuracy: 0.9020 - val_loss: 0.3734 - val_accuracy: 0.8775\n",
      "Epoch 98/100\n",
      "50000/50000 [==============================] - 5s 110us/step - loss: 0.2643 - accuracy: 0.9023 - val_loss: 0.3903 - val_accuracy: 0.8717\n",
      "Epoch 99/100\n",
      "50000/50000 [==============================] - 6s 110us/step - loss: 0.2681 - accuracy: 0.9024 - val_loss: 0.3989 - val_accuracy: 0.8755\n",
      "Epoch 100/100\n",
      "50000/50000 [==============================] - 6s 111us/step - loss: 0.2639 - accuracy: 0.9015 - val_loss: 0.3879 - val_accuracy: 0.8770\n"
     ]
    }
   ],
   "source": [
    "history_callback_dropout = model_dropout.fit(X_train, y_train, epochs = 100, validation_data= (X_val,y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "colab_type": "code",
    "id": "Y1B6FZQpm6zg",
    "outputId": "ad5476c4-ef1e-4320-fefc-302e6429c8a3"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history_callback_dropout.history['accuracy'])\n",
    "plt.plot(history_callback_dropout.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 375
    },
    "colab_type": "code",
    "id": "ykb5xbk99UWg",
    "outputId": "97fb441d-3de4-48b7-c027-3813b786ee68"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_5 (Dense)              (None, 32)                25120     \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_6 (Dense)              (None, 32)                1056      \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_7 (Dense)              (None, 32)                1056      \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 32)                0         \n",
      "_________________________________________________________________\n",
      "dense_8 (Dense)              (None, 10)                330       \n",
      "=================================================================\n",
      "Total params: 27,562\n",
      "Trainable params: 27,562\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model_dropout.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "LXBI3tuH96av"
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "yqq7nNw9o945"
   },
   "source": [
    "## Batch Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zfmYgIU71pzZ"
   },
   "outputs": [],
   "source": [
    "def make_model_batch(optimizer=\"adam\", hidden_size= 32, dropout_rate = 0.1):\n",
    "    model = Sequential([\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dense(hidden_size, input_shape=(784,), activation='relu'),\n",
    "    BatchNormalization(),\n",
    "    Dense(10, activation='softmax')])\n",
    "\n",
    "    model.compile(optimizer=optimizer,loss=\"categorical_crossentropy\",\n",
    "                  metrics=['accuracy'])\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "phsyHuT2vJTh",
    "outputId": "6a63cd8f-a5c7-4127-9681-c77117d47c69"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 40000 samples, validate on 10000 samples\n",
      "Epoch 1/100\n",
      "40000/40000 [==============================] - 8s 188us/step - loss: 0.6284 - accuracy: 0.7898 - val_loss: 0.4841 - val_accuracy: 0.8287\n",
      "Epoch 2/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.4484 - accuracy: 0.8405 - val_loss: 0.4691 - val_accuracy: 0.8233\n",
      "Epoch 3/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.4057 - accuracy: 0.8544 - val_loss: 0.4095 - val_accuracy: 0.8534\n",
      "Epoch 4/100\n",
      "40000/40000 [==============================] - 7s 178us/step - loss: 0.3832 - accuracy: 0.8614 - val_loss: 0.3952 - val_accuracy: 0.8558\n",
      "Epoch 5/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3689 - accuracy: 0.8673 - val_loss: 0.3817 - val_accuracy: 0.8592\n",
      "Epoch 6/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.3536 - accuracy: 0.8713 - val_loss: 0.4051 - val_accuracy: 0.8552\n",
      "Epoch 7/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3448 - accuracy: 0.8740 - val_loss: 0.3779 - val_accuracy: 0.8634\n",
      "Epoch 8/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.3342 - accuracy: 0.8796 - val_loss: 0.4265 - val_accuracy: 0.8395\n",
      "Epoch 9/100\n",
      "40000/40000 [==============================] - 7s 174us/step - loss: 0.3303 - accuracy: 0.8794 - val_loss: 0.3690 - val_accuracy: 0.8650\n",
      "Epoch 10/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3230 - accuracy: 0.8815 - val_loss: 0.3666 - val_accuracy: 0.8683\n",
      "Epoch 11/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3141 - accuracy: 0.8842 - val_loss: 0.3686 - val_accuracy: 0.8670\n",
      "Epoch 12/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3100 - accuracy: 0.8865 - val_loss: 0.3731 - val_accuracy: 0.8684\n",
      "Epoch 13/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.3041 - accuracy: 0.8898 - val_loss: 0.3659 - val_accuracy: 0.8676\n",
      "Epoch 14/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2996 - accuracy: 0.8887 - val_loss: 0.3737 - val_accuracy: 0.8667\n",
      "Epoch 15/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2918 - accuracy: 0.8935 - val_loss: 0.3659 - val_accuracy: 0.8691\n",
      "Epoch 16/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2915 - accuracy: 0.8925 - val_loss: 0.3480 - val_accuracy: 0.8754\n",
      "Epoch 17/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2872 - accuracy: 0.8943 - val_loss: 0.3585 - val_accuracy: 0.8698\n",
      "Epoch 18/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2898 - accuracy: 0.8928 - val_loss: 0.3661 - val_accuracy: 0.8636\n",
      "Epoch 19/100\n",
      "40000/40000 [==============================] - 7s 178us/step - loss: 0.2818 - accuracy: 0.8956 - val_loss: 0.3738 - val_accuracy: 0.8643\n",
      "Epoch 20/100\n",
      "40000/40000 [==============================] - 7s 180us/step - loss: 0.2765 - accuracy: 0.8992 - val_loss: 0.3767 - val_accuracy: 0.8633\n",
      "Epoch 21/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2772 - accuracy: 0.8967 - val_loss: 0.3472 - val_accuracy: 0.8749\n",
      "Epoch 22/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2706 - accuracy: 0.9010 - val_loss: 0.3622 - val_accuracy: 0.8712\n",
      "Epoch 23/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2728 - accuracy: 0.8993 - val_loss: 0.3750 - val_accuracy: 0.8648\n",
      "Epoch 24/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2713 - accuracy: 0.9007 - val_loss: 0.3574 - val_accuracy: 0.8722\n",
      "Epoch 25/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2704 - accuracy: 0.8995 - val_loss: 0.3810 - val_accuracy: 0.8633\n",
      "Epoch 26/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2657 - accuracy: 0.9014 - val_loss: 0.3706 - val_accuracy: 0.8660\n",
      "Epoch 27/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2642 - accuracy: 0.9027 - val_loss: 0.4088 - val_accuracy: 0.8573\n",
      "Epoch 28/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2633 - accuracy: 0.9028 - val_loss: 0.3669 - val_accuracy: 0.8655\n",
      "Epoch 29/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2601 - accuracy: 0.9043 - val_loss: 0.3668 - val_accuracy: 0.8736\n",
      "Epoch 30/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2599 - accuracy: 0.9039 - val_loss: 0.3659 - val_accuracy: 0.8700\n",
      "Epoch 31/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2559 - accuracy: 0.9053 - val_loss: 0.3947 - val_accuracy: 0.8605\n",
      "Epoch 32/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2523 - accuracy: 0.9060 - val_loss: 0.3737 - val_accuracy: 0.8697\n",
      "Epoch 33/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2546 - accuracy: 0.9064 - val_loss: 0.4251 - val_accuracy: 0.8475\n",
      "Epoch 34/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2508 - accuracy: 0.9066 - val_loss: 0.3715 - val_accuracy: 0.8710\n",
      "Epoch 35/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2470 - accuracy: 0.9082 - val_loss: 0.3773 - val_accuracy: 0.8699\n",
      "Epoch 36/100\n",
      "40000/40000 [==============================] - 7s 174us/step - loss: 0.2462 - accuracy: 0.9088 - val_loss: 0.3790 - val_accuracy: 0.8699\n",
      "Epoch 37/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2477 - accuracy: 0.9078 - val_loss: 0.3837 - val_accuracy: 0.8705\n",
      "Epoch 38/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2453 - accuracy: 0.9088 - val_loss: 0.4108 - val_accuracy: 0.8581\n",
      "Epoch 39/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2436 - accuracy: 0.9095 - val_loss: 0.3943 - val_accuracy: 0.8617\n",
      "Epoch 40/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2414 - accuracy: 0.9102 - val_loss: 0.3828 - val_accuracy: 0.8657\n",
      "Epoch 41/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2387 - accuracy: 0.9110 - val_loss: 0.3879 - val_accuracy: 0.8657\n",
      "Epoch 42/100\n",
      "40000/40000 [==============================] - 7s 174us/step - loss: 0.2397 - accuracy: 0.9125 - val_loss: 0.3980 - val_accuracy: 0.8671\n",
      "Epoch 43/100\n",
      "40000/40000 [==============================] - 7s 174us/step - loss: 0.2386 - accuracy: 0.9108 - val_loss: 0.3800 - val_accuracy: 0.8686\n",
      "Epoch 44/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2396 - accuracy: 0.9118 - val_loss: 0.3705 - val_accuracy: 0.8719\n",
      "Epoch 45/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2311 - accuracy: 0.9151 - val_loss: 0.3930 - val_accuracy: 0.8649\n",
      "Epoch 46/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2320 - accuracy: 0.9131 - val_loss: 0.3839 - val_accuracy: 0.8667\n",
      "Epoch 47/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2301 - accuracy: 0.9148 - val_loss: 0.3889 - val_accuracy: 0.8706\n",
      "Epoch 48/100\n",
      "40000/40000 [==============================] - 7s 174us/step - loss: 0.2348 - accuracy: 0.9118 - val_loss: 0.3893 - val_accuracy: 0.8675\n",
      "Epoch 49/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2287 - accuracy: 0.9144 - val_loss: 0.4043 - val_accuracy: 0.8653\n",
      "Epoch 50/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2292 - accuracy: 0.9152 - val_loss: 0.3921 - val_accuracy: 0.8659\n",
      "Epoch 51/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2253 - accuracy: 0.9160 - val_loss: 0.4064 - val_accuracy: 0.8668\n",
      "Epoch 52/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2296 - accuracy: 0.9137 - val_loss: 0.4035 - val_accuracy: 0.8615\n",
      "Epoch 53/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2269 - accuracy: 0.9157 - val_loss: 0.3969 - val_accuracy: 0.8661\n",
      "Epoch 54/100\n",
      "40000/40000 [==============================] - 7s 173us/step - loss: 0.2290 - accuracy: 0.9152 - val_loss: 0.4084 - val_accuracy: 0.8618\n",
      "Epoch 55/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2258 - accuracy: 0.9170 - val_loss: 0.3963 - val_accuracy: 0.8693\n",
      "Epoch 56/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2206 - accuracy: 0.9173 - val_loss: 0.4435 - val_accuracy: 0.8583\n",
      "Epoch 57/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2249 - accuracy: 0.9163 - val_loss: 0.3955 - val_accuracy: 0.8683\n",
      "Epoch 58/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2217 - accuracy: 0.9179 - val_loss: 0.4107 - val_accuracy: 0.8602\n",
      "Epoch 59/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2228 - accuracy: 0.9153 - val_loss: 0.4060 - val_accuracy: 0.8682\n",
      "Epoch 60/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2226 - accuracy: 0.9174 - val_loss: 0.4253 - val_accuracy: 0.8602\n",
      "Epoch 61/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2238 - accuracy: 0.9175 - val_loss: 0.4013 - val_accuracy: 0.8694\n",
      "Epoch 62/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2187 - accuracy: 0.9190 - val_loss: 0.4068 - val_accuracy: 0.8712\n",
      "Epoch 63/100\n",
      "40000/40000 [==============================] - 7s 180us/step - loss: 0.2189 - accuracy: 0.9168 - val_loss: 0.4132 - val_accuracy: 0.8680\n",
      "Epoch 64/100\n",
      "40000/40000 [==============================] - 7s 183us/step - loss: 0.2187 - accuracy: 0.9180 - val_loss: 0.3882 - val_accuracy: 0.8709\n",
      "Epoch 65/100\n",
      "40000/40000 [==============================] - 7s 178us/step - loss: 0.2165 - accuracy: 0.9190 - val_loss: 0.4266 - val_accuracy: 0.8540\n",
      "Epoch 66/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2162 - accuracy: 0.9207 - val_loss: 0.4268 - val_accuracy: 0.8569\n",
      "Epoch 67/100\n",
      "40000/40000 [==============================] - 7s 178us/step - loss: 0.2160 - accuracy: 0.9187 - val_loss: 0.4343 - val_accuracy: 0.8594\n",
      "Epoch 68/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2136 - accuracy: 0.9206 - val_loss: 0.4111 - val_accuracy: 0.8680\n",
      "Epoch 69/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2141 - accuracy: 0.9195 - val_loss: 0.4110 - val_accuracy: 0.8681\n",
      "Epoch 70/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2113 - accuracy: 0.9223 - val_loss: 0.4025 - val_accuracy: 0.8689\n",
      "Epoch 71/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2091 - accuracy: 0.9216 - val_loss: 0.3972 - val_accuracy: 0.8744\n",
      "Epoch 72/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2133 - accuracy: 0.9214 - val_loss: 0.4241 - val_accuracy: 0.8602\n",
      "Epoch 73/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2119 - accuracy: 0.9223 - val_loss: 0.4114 - val_accuracy: 0.8644\n",
      "Epoch 74/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2081 - accuracy: 0.9238 - val_loss: 0.4091 - val_accuracy: 0.8676\n",
      "Epoch 75/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2084 - accuracy: 0.9219 - val_loss: 0.4025 - val_accuracy: 0.8702\n",
      "Epoch 76/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2113 - accuracy: 0.9212 - val_loss: 0.4131 - val_accuracy: 0.8653\n",
      "Epoch 77/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2087 - accuracy: 0.9220 - val_loss: 0.4125 - val_accuracy: 0.8663\n",
      "Epoch 78/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2070 - accuracy: 0.9234 - val_loss: 0.4146 - val_accuracy: 0.8656\n",
      "Epoch 79/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2089 - accuracy: 0.9213 - val_loss: 0.4151 - val_accuracy: 0.8637\n",
      "Epoch 80/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2044 - accuracy: 0.9226 - val_loss: 0.4150 - val_accuracy: 0.8660\n",
      "Epoch 81/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2063 - accuracy: 0.9238 - val_loss: 0.4302 - val_accuracy: 0.8674\n",
      "Epoch 82/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2049 - accuracy: 0.9254 - val_loss: 0.4206 - val_accuracy: 0.8683\n",
      "Epoch 83/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2043 - accuracy: 0.9232 - val_loss: 0.4673 - val_accuracy: 0.8576\n",
      "Epoch 84/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.2046 - accuracy: 0.9236 - val_loss: 0.4291 - val_accuracy: 0.8653\n",
      "Epoch 85/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2075 - accuracy: 0.9251 - val_loss: 0.4143 - val_accuracy: 0.8674\n",
      "Epoch 86/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2018 - accuracy: 0.9248 - val_loss: 0.4085 - val_accuracy: 0.8718\n",
      "Epoch 87/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.2030 - accuracy: 0.9236 - val_loss: 0.4373 - val_accuracy: 0.8657\n",
      "Epoch 88/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.2011 - accuracy: 0.9248 - val_loss: 0.4087 - val_accuracy: 0.8710\n",
      "Epoch 89/100\n",
      "40000/40000 [==============================] - 7s 175us/step - loss: 0.1999 - accuracy: 0.9247 - val_loss: 0.4420 - val_accuracy: 0.8637\n",
      "Epoch 90/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.1995 - accuracy: 0.9252 - val_loss: 0.4183 - val_accuracy: 0.8718\n",
      "Epoch 91/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.1982 - accuracy: 0.9266 - val_loss: 0.4197 - val_accuracy: 0.8708\n",
      "Epoch 92/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1980 - accuracy: 0.9272 - val_loss: 0.4258 - val_accuracy: 0.8649\n",
      "Epoch 93/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.1976 - accuracy: 0.9265 - val_loss: 0.4419 - val_accuracy: 0.8622\n",
      "Epoch 94/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1945 - accuracy: 0.9278 - val_loss: 0.4328 - val_accuracy: 0.8697\n",
      "Epoch 95/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1957 - accuracy: 0.9273 - val_loss: 0.4516 - val_accuracy: 0.8599\n",
      "Epoch 96/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.1961 - accuracy: 0.9277 - val_loss: 0.4416 - val_accuracy: 0.8679\n",
      "Epoch 97/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1951 - accuracy: 0.9274 - val_loss: 0.4407 - val_accuracy: 0.8584\n",
      "Epoch 98/100\n",
      "40000/40000 [==============================] - 7s 176us/step - loss: 0.1968 - accuracy: 0.9274 - val_loss: 0.4385 - val_accuracy: 0.8671\n",
      "Epoch 99/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1936 - accuracy: 0.9278 - val_loss: 0.4388 - val_accuracy: 0.8643\n",
      "Epoch 100/100\n",
      "40000/40000 [==============================] - 7s 177us/step - loss: 0.1946 - accuracy: 0.9272 - val_loss: 0.4527 - val_accuracy: 0.8623\n"
     ]
    }
   ],
   "source": [
    "model_batch = make_model_batch()\n",
    "history_callback_batch = model_batch.fit(X_train, y_train, epochs = 100, validation_data= (X_val,y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 295
    },
    "colab_type": "code",
    "id": "8Wr77vu3vS7N",
    "outputId": "214c9f43-e2a8-434f-cb28-467d9bcedf82"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history_callback_batch.history['accuracy'])\n",
    "plt.plot(history_callback_batch.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 33
    },
    "colab_type": "code",
    "id": "mzFGn0tonzqr",
    "outputId": "118242ca-2799-4a69-c804-26b55b8e2cb5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dropout_rate': 0.2, 'epochs': 50, 'hidden_size': 32}"
      ]
     },
     "execution_count": 44,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_batch.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "colab_type": "code",
    "id": "xUKStZFbvX_a",
    "outputId": "5028b105-356b-4516-e5bd-6a71c74dac63"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 9000 samples, validate on 1000 samples\n",
      "Epoch 1/100\n",
      "9000/9000 [==============================] - 1s 70us/step - loss: 1.2694 - accuracy: 0.5899 - val_loss: 1.3233 - val_accuracy: 0.6800\n",
      "Epoch 2/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.6466 - accuracy: 0.7862 - val_loss: 0.8085 - val_accuracy: 0.7730\n",
      "Epoch 3/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.5125 - accuracy: 0.8204 - val_loss: 0.5442 - val_accuracy: 0.8210\n",
      "Epoch 4/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.4529 - accuracy: 0.8409 - val_loss: 0.5694 - val_accuracy: 0.8010\n",
      "Epoch 5/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.4131 - accuracy: 0.8532 - val_loss: 0.4715 - val_accuracy: 0.8430\n",
      "Epoch 6/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.3882 - accuracy: 0.8606 - val_loss: 0.4762 - val_accuracy: 0.8360\n",
      "Epoch 7/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.3630 - accuracy: 0.8678 - val_loss: 0.5006 - val_accuracy: 0.8280\n",
      "Epoch 8/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.3423 - accuracy: 0.8821 - val_loss: 0.4602 - val_accuracy: 0.8390\n",
      "Epoch 9/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.3233 - accuracy: 0.8844 - val_loss: 0.4908 - val_accuracy: 0.8250\n",
      "Epoch 10/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.3112 - accuracy: 0.8891 - val_loss: 0.4277 - val_accuracy: 0.8570\n",
      "Epoch 11/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.3000 - accuracy: 0.8910 - val_loss: 0.4404 - val_accuracy: 0.8430\n",
      "Epoch 12/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.2885 - accuracy: 0.8954 - val_loss: 0.4750 - val_accuracy: 0.8410\n",
      "Epoch 13/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.2744 - accuracy: 0.9013 - val_loss: 0.4546 - val_accuracy: 0.8430\n",
      "Epoch 14/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.2635 - accuracy: 0.9028 - val_loss: 0.4736 - val_accuracy: 0.8490\n",
      "Epoch 15/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.2485 - accuracy: 0.9103 - val_loss: 0.5063 - val_accuracy: 0.8250\n",
      "Epoch 16/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.2441 - accuracy: 0.9097 - val_loss: 0.4935 - val_accuracy: 0.8440\n",
      "Epoch 17/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.2298 - accuracy: 0.9160 - val_loss: 0.4610 - val_accuracy: 0.8300\n",
      "Epoch 18/100\n",
      "9000/9000 [==============================] - 0s 43us/step - loss: 0.2201 - accuracy: 0.9210 - val_loss: 0.4821 - val_accuracy: 0.8300\n",
      "Epoch 19/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.2121 - accuracy: 0.9254 - val_loss: 0.5464 - val_accuracy: 0.8410\n",
      "Epoch 20/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.2030 - accuracy: 0.9249 - val_loss: 0.5227 - val_accuracy: 0.8340\n",
      "Epoch 21/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.1994 - accuracy: 0.9270 - val_loss: 0.5781 - val_accuracy: 0.8320\n",
      "Epoch 22/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1949 - accuracy: 0.9303 - val_loss: 0.5424 - val_accuracy: 0.8270\n",
      "Epoch 23/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1894 - accuracy: 0.9311 - val_loss: 0.6045 - val_accuracy: 0.8140\n",
      "Epoch 24/100\n",
      "9000/9000 [==============================] - 0s 44us/step - loss: 0.1860 - accuracy: 0.9319 - val_loss: 0.5442 - val_accuracy: 0.8440\n",
      "Epoch 25/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.2030 - accuracy: 0.9222 - val_loss: 0.5134 - val_accuracy: 0.8330\n",
      "Epoch 26/100\n",
      "9000/9000 [==============================] - 0s 43us/step - loss: 0.1794 - accuracy: 0.9356 - val_loss: 0.5126 - val_accuracy: 0.8420\n",
      "Epoch 27/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1668 - accuracy: 0.9398 - val_loss: 0.6200 - val_accuracy: 0.8120\n",
      "Epoch 28/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1602 - accuracy: 0.9400 - val_loss: 0.5602 - val_accuracy: 0.8310\n",
      "Epoch 29/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1583 - accuracy: 0.9451 - val_loss: 0.6067 - val_accuracy: 0.8230\n",
      "Epoch 30/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1525 - accuracy: 0.9451 - val_loss: 0.5808 - val_accuracy: 0.8250\n",
      "Epoch 31/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1586 - accuracy: 0.9443 - val_loss: 0.6291 - val_accuracy: 0.7990\n",
      "Epoch 32/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1490 - accuracy: 0.9478 - val_loss: 0.5588 - val_accuracy: 0.8250\n",
      "Epoch 33/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1413 - accuracy: 0.9478 - val_loss: 0.5444 - val_accuracy: 0.8290\n",
      "Epoch 34/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1315 - accuracy: 0.9523 - val_loss: 0.5734 - val_accuracy: 0.8320\n",
      "Epoch 35/100\n",
      "9000/9000 [==============================] - 0s 44us/step - loss: 0.1307 - accuracy: 0.9514 - val_loss: 0.6117 - val_accuracy: 0.8170\n",
      "Epoch 36/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.1351 - accuracy: 0.9494 - val_loss: 0.5947 - val_accuracy: 0.8260\n",
      "Epoch 37/100\n",
      "9000/9000 [==============================] - 0s 44us/step - loss: 0.1296 - accuracy: 0.9514 - val_loss: 0.5666 - val_accuracy: 0.8400\n",
      "Epoch 38/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1335 - accuracy: 0.9511 - val_loss: 0.6292 - val_accuracy: 0.8220\n",
      "Epoch 39/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1347 - accuracy: 0.9504 - val_loss: 0.5655 - val_accuracy: 0.8360\n",
      "Epoch 40/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.1234 - accuracy: 0.9542 - val_loss: 0.6025 - val_accuracy: 0.8390\n",
      "Epoch 41/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1171 - accuracy: 0.9543 - val_loss: 0.6455 - val_accuracy: 0.8240\n",
      "Epoch 42/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1159 - accuracy: 0.9560 - val_loss: 0.6396 - val_accuracy: 0.8170\n",
      "Epoch 43/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.1074 - accuracy: 0.9607 - val_loss: 0.6644 - val_accuracy: 0.8120\n",
      "Epoch 44/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1055 - accuracy: 0.9613 - val_loss: 0.6455 - val_accuracy: 0.8330\n",
      "Epoch 45/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1170 - accuracy: 0.9559 - val_loss: 0.6566 - val_accuracy: 0.8410\n",
      "Epoch 46/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.1137 - accuracy: 0.9591 - val_loss: 0.6918 - val_accuracy: 0.8130\n",
      "Epoch 47/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.1003 - accuracy: 0.9619 - val_loss: 0.6202 - val_accuracy: 0.8560\n",
      "Epoch 48/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1006 - accuracy: 0.9628 - val_loss: 0.6492 - val_accuracy: 0.8370\n",
      "Epoch 49/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0918 - accuracy: 0.9659 - val_loss: 0.6372 - val_accuracy: 0.8260\n",
      "Epoch 50/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.1027 - accuracy: 0.9621 - val_loss: 0.7883 - val_accuracy: 0.8210\n",
      "Epoch 51/100\n",
      "9000/9000 [==============================] - 0s 46us/step - loss: 0.0925 - accuracy: 0.9667 - val_loss: 0.6036 - val_accuracy: 0.8370\n",
      "Epoch 52/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0887 - accuracy: 0.9683 - val_loss: 0.6140 - val_accuracy: 0.8370\n",
      "Epoch 53/100\n",
      "9000/9000 [==============================] - 0s 43us/step - loss: 0.0874 - accuracy: 0.9698 - val_loss: 0.6674 - val_accuracy: 0.8300\n",
      "Epoch 54/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0712 - accuracy: 0.9759 - val_loss: 0.7803 - val_accuracy: 0.8200\n",
      "Epoch 55/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0723 - accuracy: 0.9756 - val_loss: 0.7147 - val_accuracy: 0.8320\n",
      "Epoch 56/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.0760 - accuracy: 0.9718 - val_loss: 0.7524 - val_accuracy: 0.8290\n",
      "Epoch 57/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0848 - accuracy: 0.9679 - val_loss: 0.6887 - val_accuracy: 0.8390\n",
      "Epoch 58/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0789 - accuracy: 0.9711 - val_loss: 0.7830 - val_accuracy: 0.8280\n",
      "Epoch 59/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0817 - accuracy: 0.9693 - val_loss: 0.7719 - val_accuracy: 0.8330\n",
      "Epoch 60/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0743 - accuracy: 0.9751 - val_loss: 0.7875 - val_accuracy: 0.8300\n",
      "Epoch 61/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0765 - accuracy: 0.9712 - val_loss: 0.7048 - val_accuracy: 0.8190\n",
      "Epoch 62/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0897 - accuracy: 0.9671 - val_loss: 0.7948 - val_accuracy: 0.8100\n",
      "Epoch 63/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.0674 - accuracy: 0.9768 - val_loss: 0.7336 - val_accuracy: 0.8430\n",
      "Epoch 64/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0664 - accuracy: 0.9777 - val_loss: 0.7790 - val_accuracy: 0.8320\n",
      "Epoch 65/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0653 - accuracy: 0.9758 - val_loss: 0.7282 - val_accuracy: 0.8290\n",
      "Epoch 66/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.0635 - accuracy: 0.9754 - val_loss: 0.7254 - val_accuracy: 0.8320\n",
      "Epoch 67/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0663 - accuracy: 0.9758 - val_loss: 0.8176 - val_accuracy: 0.8310\n",
      "Epoch 68/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0696 - accuracy: 0.9753 - val_loss: 0.9654 - val_accuracy: 0.7760\n",
      "Epoch 69/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.0634 - accuracy: 0.9761 - val_loss: 0.7376 - val_accuracy: 0.8410\n",
      "Epoch 70/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.0761 - accuracy: 0.9731 - val_loss: 0.8863 - val_accuracy: 0.8300\n",
      "Epoch 71/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.0623 - accuracy: 0.9786 - val_loss: 0.8311 - val_accuracy: 0.8280\n",
      "Epoch 72/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0534 - accuracy: 0.9803 - val_loss: 0.7874 - val_accuracy: 0.8120\n",
      "Epoch 73/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.0629 - accuracy: 0.9780 - val_loss: 0.8737 - val_accuracy: 0.8210\n",
      "Epoch 74/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0683 - accuracy: 0.9746 - val_loss: 0.7391 - val_accuracy: 0.8390\n",
      "Epoch 75/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0578 - accuracy: 0.9803 - val_loss: 0.7775 - val_accuracy: 0.8310\n",
      "Epoch 76/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0487 - accuracy: 0.9839 - val_loss: 0.8658 - val_accuracy: 0.8270\n",
      "Epoch 77/100\n",
      "9000/9000 [==============================] - 0s 39us/step - loss: 0.0543 - accuracy: 0.9797 - val_loss: 0.8321 - val_accuracy: 0.8140\n",
      "Epoch 78/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0559 - accuracy: 0.9801 - val_loss: 0.8256 - val_accuracy: 0.8240\n",
      "Epoch 79/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.0568 - accuracy: 0.9798 - val_loss: 1.0327 - val_accuracy: 0.8010\n",
      "Epoch 80/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0519 - accuracy: 0.9816 - val_loss: 0.8616 - val_accuracy: 0.8140\n",
      "Epoch 81/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0530 - accuracy: 0.9810 - val_loss: 0.9175 - val_accuracy: 0.8060\n",
      "Epoch 82/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0506 - accuracy: 0.9823 - val_loss: 0.9830 - val_accuracy: 0.8280\n",
      "Epoch 83/100\n",
      "9000/9000 [==============================] - 0s 42us/step - loss: 0.0549 - accuracy: 0.9792 - val_loss: 0.9551 - val_accuracy: 0.8260\n",
      "Epoch 84/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0501 - accuracy: 0.9818 - val_loss: 0.8926 - val_accuracy: 0.8170\n",
      "Epoch 85/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0571 - accuracy: 0.9809 - val_loss: 0.9144 - val_accuracy: 0.8280\n",
      "Epoch 86/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0748 - accuracy: 0.9732 - val_loss: 0.9412 - val_accuracy: 0.8080\n",
      "Epoch 87/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0754 - accuracy: 0.9713 - val_loss: 0.8956 - val_accuracy: 0.8340\n",
      "Epoch 88/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0614 - accuracy: 0.9793 - val_loss: 0.9829 - val_accuracy: 0.8130\n",
      "Epoch 89/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0534 - accuracy: 0.9806 - val_loss: 0.8686 - val_accuracy: 0.8270\n",
      "Epoch 90/100\n",
      "9000/9000 [==============================] - 0s 43us/step - loss: 0.0422 - accuracy: 0.9859 - val_loss: 0.8246 - val_accuracy: 0.8440\n",
      "Epoch 91/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0343 - accuracy: 0.9903 - val_loss: 0.8170 - val_accuracy: 0.8430\n",
      "Epoch 92/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0515 - accuracy: 0.9814 - val_loss: 0.9642 - val_accuracy: 0.8240\n",
      "Epoch 93/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0519 - accuracy: 0.9812 - val_loss: 1.1473 - val_accuracy: 0.7970\n",
      "Epoch 94/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0378 - accuracy: 0.9869 - val_loss: 0.8332 - val_accuracy: 0.8360\n",
      "Epoch 95/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0345 - accuracy: 0.9896 - val_loss: 0.8993 - val_accuracy: 0.8330\n",
      "Epoch 96/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0466 - accuracy: 0.9824 - val_loss: 0.9619 - val_accuracy: 0.8050\n",
      "Epoch 97/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0447 - accuracy: 0.9847 - val_loss: 0.9658 - val_accuracy: 0.8210\n",
      "Epoch 98/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0584 - accuracy: 0.9802 - val_loss: 1.0173 - val_accuracy: 0.8290\n",
      "Epoch 99/100\n",
      "9000/9000 [==============================] - 0s 40us/step - loss: 0.0667 - accuracy: 0.9776 - val_loss: 0.9444 - val_accuracy: 0.8320\n",
      "Epoch 100/100\n",
      "9000/9000 [==============================] - 0s 41us/step - loss: 0.0565 - accuracy: 0.9776 - val_loss: 0.9329 - val_accuracy: 0.8250\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f23a679dda0>"
      ]
     },
     "execution_count": 42,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "history_callback_batch = grid_batch.best_estimator_.fit(X_val, y_val, batch_size=128,\n",
    "                             epochs=100, verbose=1, validation_split=.1)\n",
    "\n",
    "plt.plot(history_callback_batch.history['accuracy'])\n",
    "plt.plot(history_callback_batch.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "dJZ7ie3ZnYK8",
    "outputId": "5f7718a7-5452-4aba-8b55-afe0afade443"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 1s 60us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8223000168800354"
      ]
     },
     "execution_count": 43,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_batch.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EFE-x8Vvnt0n"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Assignment5 Tasks1 2.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
